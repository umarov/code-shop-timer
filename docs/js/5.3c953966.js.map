{"version":3,"sources":["webpack:///./src/components/TimerNotification/TimerNotification.vue?3890","webpack:///./node_modules/@babel/runtime/helpers/builtin/es6/asyncToGenerator.js","webpack:///src/components/TimerNotification/TimerNotification.vue","webpack:///./src/components/TimerNotification/TimerNotification.vue?6c2d","webpack:///./src/components/TimerNotification/TimerNotification.vue","webpack:///./node_modules/regenerator-runtime/runtime.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","row","center","justify-space-around","outline","flat","color","nativeOn","click","$event","subscribeForNotifications","_v","notificationPermission","staticRenderFns","_asyncToGenerator","fn","self","args","arguments","Promise","resolve","reject","gen","apply","step","key","arg","info","value","error","done","then","_next","_throw","err","Worker","timerWorker","mounted","_mounted","permission","swRegistration","setupTokens","_setupTokens","getToken","token","notificationNotAllowed","currentToken","getCachedOverride","requestPermission","notificationAllowed","setItem","notificationOverride","fireEventWithNotificationState","TimerNotification_TimerNotificationvue_type_script_lang_js","component","Object","componentNormalizer","__webpack_exports__","global","undefined","Op","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","module","runtime","regeneratorRuntime","exports","wrap","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","call","Gp","GeneratorFunctionPrototype","Generator","create","GeneratorFunction","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","__await","defineIteratorMethods","AsyncIterator","async","innerFn","outerFn","tryLocsList","iter","next","result","toString","keys","object","push","reverse","length","pop","Context","reset","skipTempReset","prev","sent","_sent","delegate","method","tryEntries","forEach","resetTryEntry","charAt","isNaN","slice","stop","rootEntry","rootRecord","completion","type","rval","dispatchException","exception","context","handle","loc","caught","record","i","entry","tryLoc","hasCatch","hasFinally","catchLoc","finallyLoc","Error","abrupt","finallyEntry","complete","afterLoc","finish","catch","thrown","delegateYield","iterable","resultName","nextLoc","protoGenerator","generator","_invoke","makeInvokeMethod","tryCatch","obj","invoke","unwrapped","previousPromise","enqueue","callInvokeWithMethodAndArg","state","doneResult","delegateResult","maybeInvokeDelegate","return","TypeError","pushTryEntry","locs","iteratorMethod","Function"],"mappings":"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","file":"js/5.3c953966.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('v-layout',{staticClass:\"text-xs-center\",attrs:{\"row\":\"\",\"center\":\"\",\"justify-space-around\":\"\"}},[_c('v-flex',[(_vm.notificationAllowed)?_c('v-btn',{staticClass:\"green--text\",attrs:{\"outline\":\"\",\"flat\":\"\",\"color\":\"green\"},nativeOn:{\"click\":function($event){_vm.subscribeForNotifications()}}},[_vm._v(\"\\n        Nofitications: On\\n        \"),_c('v-icon',[_vm._v(\"notifications\")])],1):(_vm.notificationPermission === 'default')?_c('v-btn',{staticClass:\"grey--text\",attrs:{\"outline\":\"\",\"flat\":\"\",\"color\":\"green\"},nativeOn:{\"click\":function($event){_vm.subscribeForNotifications()}}},[_vm._v(\"\\n        Nofitications: Need permission\\n        \"),_c('v-icon',[_vm._v(\"notifications_off\")])],1):(_vm.notificationPermission === 'denied')?_c('v-btn',{staticClass:\"grey--text\",attrs:{\"outline\":\"\",\"flat\":\"\",\"color\":\"green\"},nativeOn:{\"click\":function($event){_vm.subscribeForNotifications()}}},[_vm._v(\"\\n        Nofitications: Denied\\n        \"),_c('v-icon',[_vm._v(\"notifications_off\")])],1):_c('v-btn',{staticClass:\"red--text\",attrs:{\"outline\":\"\",\"flat\":\"\",\"color\":\"green\"},nativeOn:{\"click\":function($event){_vm.subscribeForNotifications()}}},[_vm._v(\"\\n        Nofitications: Off\\n        \"),_c('v-icon',[_vm._v(\"notifications_none\")])],1)],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","export default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          Promise.resolve(value).then(_next, _throw);\n        }\n      }\n\n      function _next(value) {\n        step(\"next\", value);\n      }\n\n      function _throw(err) {\n        step(\"throw\", err);\n      }\n\n      _next();\n    });\n  };\n}","<template>\n  <div>\n    <v-layout\n      row\n      center\n      justify-space-around\n      class=\"text-xs-center\">\n      <v-flex>\n        <v-btn\n          outline\n          flat\n          color=\"green\"\n          @click.native=\"subscribeForNotifications()\"\n          v-if=\"notificationAllowed\"\n          class=\"green--text\">\n          Nofitications: On\n          <v-icon>notifications</v-icon>\n        </v-btn>\n        <v-btn\n          outline\n          flat\n          color=\"green\"\n          @click.native=\"subscribeForNotifications()\"\n          v-else-if=\"notificationPermission === 'default'\"\n          class=\"grey--text\">\n          Nofitications: Need permission\n          <v-icon>notifications_off</v-icon>\n        </v-btn>\n        <v-btn\n          outline\n          flat\n          color=\"green\"\n          @click.native=\"subscribeForNotifications()\"\n          v-else-if=\"notificationPermission === 'denied'\"\n          class=\"grey--text\">\n          Nofitications: Denied\n          <v-icon>notifications_off</v-icon>\n        </v-btn>\n        <v-btn\n          outline\n          flat\n          color=\"green\"\n          @click.native=\"subscribeForNotifications()\"\n          v-else\n          class=\"red--text\">\n          Nofitications: Off\n          <v-icon>notifications_none</v-icon>\n        </v-btn>\n      </v-flex>\n    </v-layout>\n  </div>\n</template>\n<script>\nexport default {\n  name: \"TimerNotification\",\n  props: {\n    timerWorker: {\n      type: Worker,\n      default: {}\n    }\n  },\n  data() {\n    return {\n      notificationPermission: \"default\",\n      notificationAllowed: false,\n      token: \"\",\n      worker: this.timerWorker\n    };\n  },\n  async mounted() {\n    try {\n      this.notificationPermission = Notification.permission;\n      await this.$root.swRegistration;\n      this.setupTokens();\n    } catch {\n      console.error(\"SW not supported\");\n    }\n  },\n  watch: {\n    notificationAllowed: \"setCachedOverride\"\n  },\n  methods: {\n    async setupTokens() {\n      await this.getToken();\n      this.$root.firebaseMessaging.onTokenRefresh(() => this.getToken());\n    },\n    async getToken() {\n      try {\n        const token = await this.$root.firebaseMessaging.getToken();\n        this.onTokenReceived(token);\n      } catch (err) {\n        this.notificationNotAllowed();\n      }\n    },\n    onTokenReceived(currentToken) {\n      if (currentToken) {\n        this.token = currentToken;\n        this.sendTokenToWorker(currentToken);\n        this.notificationAllowed = this.getCachedOverride();\n      } else {\n        this.notificationNotAllowed();\n      }\n    },\n    notificationNotAllowed() {\n      this.notificationAllowed = false;\n    },\n    sendTokenToWorker(token) {\n      this.worker.postMessage({\n        setNotificationToken: true,\n        notificationToken: token\n      });\n    },\n    fireEventWithNotificationState() {\n      this.$emit(\"notification-state\", this.getCachedOverride());\n    },\n    async subscribeForNotifications() {\n      try {\n        await this.$root.firebaseMessaging.requestPermission();\n        this.notificationAllowed = !this.notificationAllowed;\n      } catch (err) {\n        this.notificationAllowed = false;\n      }\n    },\n    getCachedOverride() {\n      return localStorage.getItem(\"notification-override\") === \"yes\";\n    },\n    setCachedOverride(notificationOverride) {\n      localStorage.setItem(\n        \"notification-override\",\n        notificationOverride ? \"yes\" : \"no\"\n      );\n      this.fireEventWithNotificationState();\n    }\n  }\n};\n</script>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--11-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!../../../node_modules/eslint-loader/index.js??ref--12-0!./TimerNotification.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--11-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!../../../node_modules/eslint-loader/index.js??ref--12-0!./TimerNotification.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./TimerNotification.vue?vue&type=template&id=12051a6f\"\nimport script from \"./TimerNotification.vue?vue&type=script&lang=js\"\nexport * from \"./TimerNotification.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n"],"sourceRoot":""}